"""
Tests for Tax-Calculator TaxCalcIO class.
"""
# CODING-STYLE CHECKS:
# pep8 --ignore=E402 test_taxcalcio.py
# pylint --disable=locally-disabled test_taxcalcio.py

import os
import tempfile
import pytest
import pandas as pd
# pylint: disable=import-error
from taxcalc import TaxCalcIO, Growdiff


@pytest.mark.parametrize("input_data, reform, assump", [
    ('no-dot-csv-filename', 'no-dot-json-filename', 'no-dot-json-filename'),
    (list(), list(), list()),
    ('no-exist.csv', 'no-exist.json', 'no-exist.json'),
])
def test_ctor_errors(input_data, reform, assump):
    """
    Ensure error messages are generated by TaxCalcIO.__init__.
    """
    tcio = TaxCalcIO(input_data=input_data, tax_year=2013,
                     reform=reform, assump=assump)
    assert len(tcio.errmsg) > 0


@pytest.yield_fixture
def rawinputfile():
    """
    Temporary input file that contains minimum required input variables.
    """
    ifile = tempfile.NamedTemporaryFile(suffix='.csv', mode='a', delete=False)
    contents = (
        u'RECID,MARS\n'
        u'    1,   2\n'
        u'    2,   1\n'
        u'    3,   4\n'
        u'    4,   6\n'
    )
    ifile.write(contents)
    ifile.close()
    # must close and then yield for Windows platform
    yield ifile
    if os.path.isfile(ifile.name):
        try:
            os.remove(ifile.name)
        except OSError:
            pass  # sometimes we can't remove a generated temporary file


@pytest.yield_fixture
def reformfile0():
    """
    Specify JSON reform file.
    """
    txt = """
    { "policy": {
        "_SS_Earnings_c": {"2016": [300000],
                           "2018": [500000],
                           "2020": [700000]}
      }
    }
    """
    rfile = tempfile.NamedTemporaryFile(suffix='.json', mode='a', delete=False)
    rfile.write(txt + '\n')
    rfile.close()
    # Must close and then yield for Windows platform
    yield rfile
    if os.path.isfile(rfile.name):
        try:
            os.remove(rfile.name)
        except OSError:
            pass  # sometimes we can't remove a generated temporary file


@pytest.yield_fixture
def assumpfile0():
    """
    Temporary assumption file with .json extension.
    """
    afile = tempfile.NamedTemporaryFile(suffix='.json', mode='a', delete=False)
    contents = """
    {
    "consumption": {},
    "behavior": {"_BE_sub": {"2020": [0.05]}},
    "growdiff_baseline": {},
    "growdiff_response": {"_ABOOK": {"2015": [-0.01]}}
    }
    """
    afile.write(contents)
    afile.close()
    # must close and then yield for Windows platform
    yield afile
    if os.path.isfile(afile.name):
        try:
            os.remove(afile.name)
        except OSError:
            pass  # sometimes we can't remove a generated temporary file


# for fixture args, pylint: disable=redefined-outer-name


@pytest.mark.parametrize("year, asm, gdr", [
    (2000, 'assumpfile0', Growdiff()),
    (2099, None, None),
    (2020, None, dict()),
])
def test_init_errors(reformfile0, assumpfile0, year, asm, gdr):
    """
    Ensure error messages generated by TaxCalcIO.init method.
    """
    recdict = {'RECID': 1, 'MARS': 1, 'e00300': 100000, 's006': 1e8}
    recdf = pd.DataFrame(data=recdict, index=[0])
    if asm == 'assumpfile0':
        assump = assumpfile0.name
    else:
        assump = asm
    tcio = TaxCalcIO(input_data=recdf,
                     tax_year=year,
                     reform=reformfile0.name,
                     assump=assump)
    assert len(tcio.errmsg) == 0
    tcio.init(input_data=recdf,
              tax_year=year,
              reform=reformfile0.name,
              assump=assump,
              growdiff_response=gdr,
              aging_input_data=False,
              exact_calculations=False)
    assert len(tcio.errmsg) > 0


def test_creation_with_aging(rawinputfile, reformfile0):
    """
    Test TaxCalcIO instantiation with/without no policy reform and with aging.
    """
    taxyear = 2021
    tcio = TaxCalcIO(input_data=rawinputfile.name,
                     tax_year=taxyear,
                     reform=reformfile0.name,
                     assump=None)
    assert len(tcio.errmsg) == 0
    tcio.init(input_data=rawinputfile.name,
              tax_year=taxyear,
              reform=reformfile0.name,
              assump=None,
              growdiff_response=Growdiff(),
              aging_input_data=True,
              exact_calculations=False)
    assert len(tcio.errmsg) == 0
    assert tcio.tax_year() == taxyear
    taxyear = 2016
    tcio = TaxCalcIO(input_data=rawinputfile.name,
                     tax_year=taxyear,
                     reform=None,
                     assump=None)
    assert len(tcio.errmsg) == 0
    tcio.init(input_data=rawinputfile.name,
              tax_year=taxyear,
              reform=None,
              assump=None,
              growdiff_response=None,
              aging_input_data=True,
              exact_calculations=False)
    assert len(tcio.errmsg) == 0
    assert tcio.tax_year() == taxyear


@pytest.yield_fixture
def reformfile1():
    """
    Temporary reform file with .json extension.
    """
    rfile = tempfile.NamedTemporaryFile(suffix='.json', mode='a', delete=False)
    contents = """
    { "policy": {
        "_AMT_brk1": { // top of first AMT tax bracket
          "2015": [200000],
          "2017": [300000]},
        "_EITC_c": { // max EITC amount by number of qualifying kids (0,1,2,3+)
          "2016": [[ 900, 5000,  8000,  9000]],
          "2019": [[1200, 7000, 10000, 12000]]},
        "_II_em": { // personal exemption amount (see indexing changes below)
          "2016": [6000],
          "2018": [7500],
          "2020": [9000]},
        "_II_em_cpi": { // personal exemption amount indexing status
          "2016": false, // values in future years are same as this year value
          "2018": true // values in future years indexed with this year as base
          },
        "_SS_Earnings_c": { // social security (OASDI) maximum taxable earnings
          "2016": [300000],
          "2018": [500000],
          "2020": [700000]},
        "_AMT_em_cpi": { // AMT exemption amount indexing status
          "2017": false, // values in future years are same as this year value
          "2020": true // values in future years indexed with this year as base
        }
      }
    }
    """
    rfile.write(contents)
    rfile.close()
    # must close and then yield for Windows platform
    yield rfile
    if os.path.isfile(rfile.name):
        try:
            os.remove(rfile.name)
        except OSError:
            pass  # sometimes we can't remove a generated temporary file


@pytest.yield_fixture
def assumpfile1():
    """
    Temporary assumption file with .json extension.
    """
    afile = tempfile.NamedTemporaryFile(suffix='.json', mode='a', delete=False)
    contents = """
    { "consumption": { "_MPC_e18400": {"2018": [0.05]} },
      "behavior": {},
      "growdiff_baseline": {},
      "growdiff_response": {}
    }
    """
    afile.write(contents)
    afile.close()
    # must close and then yield for Windows platform
    yield afile
    if os.path.isfile(afile.name):
        try:
            os.remove(afile.name)
        except OSError:
            pass  # sometimes we can't remove a generated temporary file


def test_output_otions(rawinputfile, reformfile1, assumpfile1):
    """
    Test TaxCalcIO output_ceeu & output_dump options when writing_output_file.
    """
    taxyear = 2021
    tcio = TaxCalcIO(input_data=rawinputfile.name,
                     tax_year=taxyear,
                     reform=reformfile1.name,
                     assump=assumpfile1.name)
    assert len(tcio.errmsg) == 0
    tcio.init(input_data=rawinputfile.name,
              tax_year=taxyear,
              reform=reformfile1.name,
              assump=assumpfile1.name,
              growdiff_response=None,
              aging_input_data=False,
              exact_calculations=False)
    assert len(tcio.errmsg) == 0
    outfilepath = tcio.output_filepath()
    # --ceeu output and standard output
    try:
        tcio.analyze(writing_output_file=True, output_ceeu=True)
    except:  # pylint: disable=bare-except
        if os.path.isfile(outfilepath):
            try:
                os.remove(outfilepath)
            except OSError:
                pass  # sometimes we can't remove a generated temporary file
        assert 'TaxCalcIO.calculate(ceeu)_ok' == 'no'
    # --dump output
    try:
        tcio.analyze(writing_output_file=True, output_dump=True)
    except:  # pylint: disable=bare-except
        if os.path.isfile(outfilepath):
            try:
                os.remove(outfilepath)
            except OSError:
                pass  # sometimes we can't remove a generated temporary file
        assert 'TaxCalcIO.calculate(dump)_ok' == 'no'
    # if tries were successful, try to remove the output file
    if os.path.isfile(outfilepath):
        try:
            os.remove(outfilepath)
        except OSError:
            pass  # sometimes we can't remove a generated temporary file


def test_no_tables(reformfile1):
    """
    Test TaxCalcIO with output_tables=True but with zero weights.
    """
    # create input sample that cannot have distributional tables tabulated
    nobs = 10
    idict = dict()
    idict['RECID'] = [i for i in range(1, nobs + 1)]
    idict['MARS'] = [2 for i in range(1, nobs + 1)]
    idict['s006'] = [0.0 for i in range(1, nobs + 1)]
    idict['e00300'] = [10000 * i for i in range(1, nobs + 1)]
    idict['_expanded_income'] = idict['e00300']
    idf = pd.DataFrame(idict, columns=list(idict))
    # create and initialize TaxCalcIO object
    tcio = TaxCalcIO(input_data=idf,
                     tax_year=2020,
                     reform=reformfile1.name,
                     assump=None)
    assert len(tcio.errmsg) == 0
    tcio.init(input_data=idf,
              tax_year=2020,
              reform=reformfile1.name,
              assump=None,
              growdiff_response=None,
              aging_input_data=False,
              exact_calculations=False)
    assert len(tcio.errmsg) == 0
    # create TaxCalcIO tables file
    tcio.analyze(writing_output_file=False, output_tables=True)
    # delete tables file
    output_filename = tcio.output_filepath()
    fname = output_filename.replace('.csv', '-tab.text')
    if os.path.isfile(fname):
        os.remove(fname)


def test_tables(reformfile1):
    """
    Test TaxCalcIO with output_tables=True and with positive weights.
    """
    # create tabable input
    nobs = 100
    idict = dict()
    idict['RECID'] = [i for i in range(1, nobs + 1)]
    idict['MARS'] = [2 for i in range(1, nobs + 1)]
    idict['s006'] = [10.0 for i in range(1, nobs + 1)]
    idict['e00300'] = [10000 * i for i in range(1, nobs + 1)]
    idict['_expanded_income'] = idict['e00300']
    idf = pd.DataFrame(idict, columns=list(idict))
    # create and initialize TaxCalcIO object
    tcio = TaxCalcIO(input_data=idf,
                     tax_year=2020,
                     reform=reformfile1.name,
                     assump=None)
    assert len(tcio.errmsg) == 0
    tcio.init(input_data=idf,
              tax_year=2020,
              reform=reformfile1.name,
              assump=None,
              growdiff_response=None,
              aging_input_data=False,
              exact_calculations=False)
    assert len(tcio.errmsg) == 0
    # create TaxCalcIO tables file
    tcio.analyze(writing_output_file=False, output_tables=True)
    # delete tables file
    output_filename = tcio.output_filepath()
    fname = output_filename.replace('.csv', '-tab.text')
    if os.path.isfile(fname):
        os.remove(fname)


def test_graphs(reformfile1):
    """
    Test TaxCalcIO with output_graphs=True.
    """
    # create graphable input
    nobs = 100
    idict = dict()
    idict['RECID'] = [i for i in range(1, nobs + 1)]
    idict['MARS'] = [2 for i in range(1, nobs + 1)]
    idict['s006'] = [10.0 for i in range(1, nobs + 1)]
    idict['e00300'] = [10000 * i for i in range(1, nobs + 1)]
    idict['_expanded_income'] = idict['e00300']
    idf = pd.DataFrame(idict, columns=list(idict))
    # create and initialize TaxCalcIO object
    tcio = TaxCalcIO(input_data=idf,
                     tax_year=2020,
                     reform=reformfile1.name,
                     assump=None)
    assert len(tcio.errmsg) == 0
    tcio.init(input_data=idf,
              tax_year=2020,
              reform=reformfile1.name,
              assump=None,
              growdiff_response=None,
              aging_input_data=False,
              exact_calculations=False)
    assert len(tcio.errmsg) == 0
    tcio.analyze(writing_output_file=False, output_graphs=True)
    # delete graph files
    output_filename = tcio.output_filepath()
    fname = output_filename.replace('.csv', '-atr.html')
    if os.path.isfile(fname):
        os.remove(fname)
    fname = output_filename.replace('.csv', '-mtr.html')
    if os.path.isfile(fname):
        os.remove(fname)


@pytest.yield_fixture
def lumpsumreformfile():
    """
    Temporary reform file without .json extension.
    """
    rfile = tempfile.NamedTemporaryFile(suffix='.json', mode='a', delete=False)
    lumpsum_reform_contents = """
    {
      "policy": {"_LST": {"2013": [200]}}
    }
    """
    rfile.write(lumpsum_reform_contents)
    rfile.close()
    # must close and then yield for Windows platform
    yield rfile
    if os.path.isfile(rfile.name):
        try:
            os.remove(rfile.name)
        except OSError:
            pass  # sometimes we can't remove a generated temporary file


def test_ceeu_output(lumpsumreformfile):
    """
    Test TaxCalcIO calculate method with no output writing using ceeu option.
    """
    taxyear = 2020
    recdict = {'RECID': 1, 'MARS': 1, 'e00300': 100000, 's006': 1e8}
    recdf = pd.DataFrame(data=recdict, index=[0])
    tcio = TaxCalcIO(input_data=recdf,
                     tax_year=taxyear,
                     reform=lumpsumreformfile.name,
                     assump=None)
    assert len(tcio.errmsg) == 0
    tcio.init(input_data=recdf,
              tax_year=taxyear,
              reform=lumpsumreformfile.name,
              assump=None,
              growdiff_response=None,
              aging_input_data=False,
              exact_calculations=False)
    assert len(tcio.errmsg) == 0
    tcio.analyze(writing_output_file=False, output_ceeu=True)
    assert tcio.tax_year() == taxyear


@pytest.yield_fixture
def assumpfile2():
    """
    Temporary assumption file with .json extension.
    """
    afile = tempfile.NamedTemporaryFile(suffix='.json', mode='a', delete=False)
    assump2_contents = """
    {
    "consumption": {},
    "behavior": {"_BE_sub": {"2020": [0.05]}},
    "growdiff_baseline": {},
    "growdiff_response": {}
    }
    """
    afile.write(assump2_contents)
    afile.close()
    # must close and then yield for Windows platform
    yield afile
    if os.path.isfile(afile.name):
        try:
            os.remove(afile.name)
        except OSError:
            pass  # sometimes we can't remove a generated temporary file


def test_ceeu_with_behavior(lumpsumreformfile, assumpfile2):
    """
    Test TaxCalcIO.analyze method when assuming behavior & doing ceeu calcs.
    """
    taxyear = 2020
    recdict = {'RECID': 1, 'MARS': 1, 'e00300': 100000, 's006': 1e8}
    recdf = pd.DataFrame(data=recdict, index=[0])
    tcio = TaxCalcIO(input_data=recdf,
                     tax_year=taxyear,
                     reform=lumpsumreformfile.name,
                     assump=assumpfile2.name)
    assert len(tcio.errmsg) == 0
    tcio.init(input_data=recdf,
              tax_year=taxyear,
              reform=lumpsumreformfile.name,
              assump=assumpfile2.name,
              growdiff_response=None,
              aging_input_data=False,
              exact_calculations=False)
    assert len(tcio.errmsg) == 0
    tcio.analyze(writing_output_file=False, output_ceeu=True)
    assert tcio.tax_year() == taxyear


def test_growmodel_analysis(reformfile1, assumpfile1):
    """
    Test TaxCalcIO.growmodel_analysis method with no output.
    """
    taxyear = 2015
    recdict = {'RECID': 1, 'MARS': 1, 'e00300': 100000, 's006': 1e8}
    recdf = pd.DataFrame(data=recdict, index=[0])
    # test growmodel_analysis with legal assumptions
    try:
        TaxCalcIO.growmodel_analysis(input_data=recdf,
                                     tax_year=taxyear,
                                     reform=reformfile1.name,
                                     assump=assumpfile1.name,
                                     aging_input_data=False,
                                     exact_calculations=False)
    except:  # pylint: disable=bare-except
        assert 'TaxCalcIO.growmodel_analysis_ok' == 'no'
